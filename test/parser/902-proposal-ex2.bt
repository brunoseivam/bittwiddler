template AttrString {               # Represents an encoded string
    var @len : uint8;               # len will not be a field of AttrString
    var _ : uint8[len];             # AttrString will be an "alias" to uint8[]
}

template AttrDesc {                 # Attribute description
    var @typeCode : uint8;
    var type : Type = match typeCode {  # IF there's no match, the program aborts with an error
        0x00 -> { AttrString; }
        0x01 -> { uint32;     }
    };
    var name : AttrString;
}

template Character(attrs:AttrDesc[]) {
    for attr in attrs {             # Character's field names will come from strings
        var $attr.name : attr.type; # Auto type conversion: AttrString -> uint8[] -> string
    };
}

parse {                               # Entry point
    var numAttrs : uint8;             # Reads in the number of attributes
    var attrs : AttrDesc[numAttrs];   # Reads in the attribute descriptions
    var character : Character(attrs); # Reads character info based on attribute descriptions

    emit('{');
    for [i, attr] in enumerate(character) {
        emit('{attr}:');

        match typeof(character.attr) {
            AttrString -> { emit('"{character.attr}"'); }
            uint32 -> { emit('{character.attr}'); }
        };

        if i < len(character) - 1 { # len of a template is its number of fields
            emit(',');
        };
    }
    emit('}\n');
}
